#!/usr/bin/env bash
set -e
set -o pipefail
set -u

LANG=C

REPO_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && git rev-parse --show-toplevel)"

# shellcheck disable=SC2034
ECHO_PRE_OK="$0 ✓"
# shellcheck disable=SC2034
ECHO_PRE_INST="$0 +"
# shellcheck disable=SC2034
ECHO_PRE_WARN="$0 !"
# shellcheck disable=SC2034
ECHO_PRE_ERR="$0 ❌"

pushd "$REPO_DIR"

# Setup repository
if [[ "$EUID" -eq "0" ]]; then
    # Do not run as a superuser
    echo >&2 echo "Superpowers might be more harmful than useful. Please run as a regular user."
    exit 1
else
    SUDO="sudo"

    # Check git is installed
    if git --version >/dev/null; then
        echo "$ECHO_PRE_OK git is installed"
    else
        echo "$ECHO_PRE_ERR git is NOT installed"
        exit 1
    fi

    # Check pip is installed
    if pip3 -V >/dev/null; then
        echo "$ECHO_PRE_OK pip is installed"
    else
        echo "$ECHO_PRE_ERR pip is NOT installed"
        exit 1
    fi

    # Check npm is installed
    if npm -v >/dev/null; then
        echo "$ECHO_PRE_OK npm is installed"
    else
        echo "$ECHO_PRE_ERR npm is NOT installed"
        exit 1
    fi

    # Check snap is installed
    if snap --version >/dev/null; then
        echo "$ECHO_PRE_OK snap is installed"
    else
        echo "$ECHO_PRE_ERR snap is NOT installed"
        exit 1
    fi

    # Check apt-get is installed
    if apt-get -v >/dev/null; then
        echo "$ECHO_PRE_OK apt-get is installed"
    else
        echo "$ECHO_PRE_ERR apt-get is NOT installed"
        exit 1
    fi

    # Install pre-commit if it's not present
    if pip3 list | grep "^pre-commit\\s.*$" >/dev/null; then
        echo "$ECHO_PRE_OK pre-commit is installed"
    else
        if pip3 install pre-commit; then
            echo "$ECHO_PRE_INST pre-commit has been installed"
        else
            echo "$ECHO_PRE_ERR pre-commit installation failed"
            exit 1
        fi
    fi

    # Install gitlint if it's not present
    if pip3 list | grep "^gitlint\\s.*$" >/dev/null; then
        echo "$ECHO_PRE_OK gitlint is installed"
    else
        if pip3 install gitlint; then
            echo "$ECHO_PRE_INST gitlint has been installed"
        else
            echo "$ECHO_PRE_ERR gitlint installation failed"
            exit 1
        fi
    fi

    # Install markdownlint-cli if it's not present
    set +o pipefail
    if npm list -g 2>/dev/null | grep "markdownlint-cli" >/dev/null; then
        echo "$ECHO_PRE_OK markdownlint-cli is installed"
    else
        if $SUDO npm install -g markdownlint-cli; then
            echo "$ECHO_PRE_INST markdownlint-cli has been installed"
        else
            echo "$ECHO_PRE_ERR markdownlint-cli installation failed"
            exit 1
        fi
    fi
    set -o pipefail

    # Install yamllint if it's not present
    if pip3 list | grep "^yamllint\\s.*$" >/dev/null; then
        echo "$ECHO_PRE_OK yamllint is installed"
    else
        if pip3 install yamllint; then
            echo "$ECHO_PRE_INST yamllint has been installed"
        else
            echo "$ECHO_PRE_ERR yamllint installation failed"
            exit 1
        fi
    fi

    # Install shfmt if it's not present
    if snap list 2>/dev/null | grep "shfmt" >/dev/null; then
        echo "$ECHO_PRE_OK shfmt is installed"
    else
        if $SUDO snap install shfmt; then
            echo "$ECHO_PRE_INST shfmt has been installed"
        else
            echo "$ECHO_PRE_ERR shfmt installation failed"
            exit 1
        fi
    fi

    # Install shellcheck if it's not present
    if apt-cache pkgnames shellcheck 2>/dev/null | grep "shellcheck" >/dev/null; then
        echo "$ECHO_PRE_OK shellcheck is installed"
    else
        if $SUDO apt-get install -y shellcheck; then
            echo "$ECHO_PRE_INST shellcheck has been installed"
        else
            echo "$ECHO_PRE_ERR shellcheck installation failed"
            exit 1
        fi
    fi

    # Install terraform if it's not present
    if apt-cache pkgnames terraform 2>/dev/null | grep "terraform" >/dev/null; then
        echo "$ECHO_PRE_OK terraform is installed"
    else
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
        sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt-get update
        if $SUDO apt-get install -y terraform; then
            echo "$ECHO_PRE_INST terraform has been installed"
        else
            echo "$ECHO_PRE_ERR terraform installation failed"
            exit 1
        fi
    fi

    # Install tflint if it's not present
    if tflint -v >/dev/null; then
        echo "$ECHO_PRE_OK tflint is installed"
    else
        if curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash; then
            echo "$ECHO_PRE_INST tflint has been installed"
        else
            echo "$ECHO_PRE_ERR tflint installation failed"
            exit 1
        fi
    fi

    # Install checkov if it's not present
    if pip3 list | grep "^checkov\\s.*$" >/dev/null; then
        echo "$ECHO_PRE_OK checkov is installed"
    else
        if pip3 install checkov; then
            echo "$ECHO_PRE_INST checkov has been installed"
        else
            echo "$ECHO_PRE_ERR checkov installation failed"
            exit 1
        fi
    fi

    # Install ansible if it's not present
    if apt-cache pkgnames ansible 2>/dev/null | grep "ansible" >/dev/null; then
        echo "$ECHO_PRE_OK ansible is installed"
    else
        if $SUDO apt-get install -y ansible; then
            echo "$ECHO_PRE_INST ansible has been installed"
        else
            echo "$ECHO_PRE_ERR ansible installation failed"
            exit 1
        fi
    fi

    # Install ansible-lint if it's not present
    if pip3 list | grep "^ansible-lint\\s.*$" >/dev/null; then
        echo "$ECHO_PRE_OK ansible-lint is installed"
    else
        if pip3 install ansible-lint; then
            echo "$ECHO_PRE_INST ansible-lint has been installed"
        else
            echo "$ECHO_PRE_ERR ansible-lint installation failed"
            exit 1
        fi
    fi

    # Install pre-commit hook if it's not present or doesn't point to the right location
    if [[ ! -L ".git/hooks/pre-commit" ]] || [ "$(readlink .git/hooks/pre-commit)" != "../../tools/pre-commit" ]; then
        if ln -s ../../tools/pre-commit .git/hooks/pre-commit; then
            echo "$ECHO_PRE_INST pre-commit hook has been installed."
        else
            echo "$ECHO_PRE_ERR pre-commit hook installation failed, cannot create symbolic link."
            exit 1
        fi
    else
        echo "$ECHO_PRE_OK pre-commit hook is installed."
    fi

    # Install commit-msg hook if it's not present or doesn't point to the right location
    if [[ ! -L ".git/hooks/commit-msg" ]] || [ "$(readlink .git/hooks/commit-msg)" != "../../tools/commit-msg" ]; then
        if ln -s ../../tools/commit-msg .git/hooks/commit-msg; then
            echo "$ECHO_PRE_INST commit-msg hook has been installed."
        else
            echo "$ECHO_PRE_ERR commit-msg hook installation failed, cannot create symbolic link."
            exit 1
        fi
    else
        echo "$ECHO_PRE_OK commit-msg hook is installed."
    fi

    # Install pre-push hook if it's not present or doesn't point to the right location
    if [[ ! -L ".git/hooks/pre-push" ]] || [ "$(readlink .git/hooks/pre-push)" != "../../tools/pre-push" ]; then
        if ln -s ../../tools/pre-push .git/hooks/pre-push; then
            echo "$ECHO_PRE_INST pre-push hook has been installed."
        else
            echo "$ECHO_PRE_ERR pre-push hook installation failed, cannot create symbolic link."
            exit 1
        fi
    else
        echo "$ECHO_PRE_OK pre-push hook is installed."
    fi

    # Check if GL_TOKEN is set
    if [ -z "${GL_TOKEN:-}" ]; then
        echo "$ECHO_PRE_WARN environment variable GL_TOKEN is not set, gitlab-ci-linter will be skipped."
    else
        echo "$ECHO_PRE_OK GL_TOKEN is set."
    fi
fi

popd
