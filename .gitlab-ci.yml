---
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE =~ /^chore\(release\)/
      when: never
    - when: always

default:
  image: alpine:latest
  before_script: &default_before_script
    - apk -U upgrade

stages:
  - validate
  - deploy
  - config
  - destroy
  - release

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  GL_TF_BE: https://gitlab.com/api/v4/projects/31099306/terraform/state
  TF_HTTP_PASSWORD: $CI_JOB_TOKEN

lint:
  stage: validate
  variables:
    PRE_COMMIT_HOME: $CI_PROJECT_DIR/.cache/pre-commit
  before_script:
    - *default_before_script
    - apk add bash curl git go grep libffi-dev npm py-pip python3-dev shellcheck shfmt terraform unzip
    - pip install checkov pre-commit
    - npm install -g markdownlint-cli
    - curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
  script:
    - |
      if [ -z "${GL_TOKEN:-}" ]; then
          SKIP=gitlab-ci-linter pre-commit run -a --hook-stage manual
      else
          GITLAB_PRIVATE_TOKEN="$GL_TOKEN" pre-commit run -a --hook-stage manual
      fi
  cache:
    paths:
      - $PRE_COMMIT_HOME
    when: always
  interruptible: true
  rules:
    - when: always

test-full:
  stage: validate
  before_script:
    - *default_before_script
    - apk add bats
  script:
    - scripts/test full
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule"

test-nightly:
  stage: validate
  before_script:
    - *default_before_script
    - apk add bats
  script:
    - scripts/test nightly
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

deploy-prod:
  stage: deploy
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - /usr/bin/env
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  script:
    - echo "Deploy **$CI_ENVIRONMENT_NAME** environment \`$CI_ENVIRONMENT_SLUG\` (tier $CI_ENVIRONMENT_TIER) to <$CI_ENVIRONMENT_URL>"
    - terraform init -reconfigure -backend-config="address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG" -backend-config="lock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock" -backend-config="unlock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock"
    - terraform apply -auto-approve -var="ENV_SLUG=$CI_ENVIRONMENT_SLUG" -var="ENV_TIER=$CI_ENVIRONMENT_TIER"
    - PROD_IP=$(terraform output -raw hcloud_server_test_ipv4_address || echo "")
    - echo "PROD_IP=$PROD_IP" >> prod.env
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform
  artifacts:
    reports:
      dotenv: prod.env
  environment:
    name: Production
    url: https://example.com
  rules:
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  resource_group: production

config-prod:
  stage: config
  image: gableroux/ansible:latest
  script:
    - echo "PROD_IP=$PROD_IP"
    - |
      if [ -n "$PROD_IP" ]; then
        echo "Configure **$CI_ENVIRONMENT_NAME** environment \`$CI_ENVIRONMENT_SLUG\` (tier $CI_ENVIRONMENT_TIER) to <$CI_ENVIRONMENT_URL>"
        eval $(ssh-agent -s)
        echo "$GL_CI_SSH_KEY" | tr -d '\r' | ssh-add -
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan "$PROD_IP" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        sed -i "s/env-slug/$CI_ENVIRONMENT_SLUG/" hcloud.yml
        ansible -u gitlab-ci -i hcloud.yml env -m ansible.builtin.ping
        ansible-playbook -u gitlab-ci -i hcloud.yml playbook.yml
      fi
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform
  environment:
    name: Production
  needs:
    - deploy-prod
  rules:
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  resource_group: production

deploy-stag:
  stage: deploy
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - /usr/bin/env
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  script:
    - echo "Deploy **$CI_ENVIRONMENT_NAME** environment \`$CI_ENVIRONMENT_SLUG\` (tier $CI_ENVIRONMENT_TIER) to <$CI_ENVIRONMENT_URL>"
    - terraform init -reconfigure -backend-config="address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG" -backend-config="lock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock" -backend-config="unlock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock"
    - terraform apply -auto-approve -var="ENV_SLUG=$CI_ENVIRONMENT_SLUG" -var="ENV_TIER=$CI_ENVIRONMENT_TIER"
    - STAG_IP=$(terraform output -raw hcloud_server_test_ipv4_address || echo "")
    - echo "STAG_IP=$STAG_IP" >> stag.env
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform
  artifacts:
    reports:
      dotenv: stag.env
  environment:
    name: Staging
    url: https://$CI_ENVIRONMENT_SLUG.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
  resource_group: staging

config-stag:
  stage: config
  image: gableroux/ansible:latest
  script:
    - echo "STAG_IP=$STAG_IP"
    - |
      if [ -n "$STAG_IP" ]; then
        echo "Configure **$CI_ENVIRONMENT_NAME** environment \`$CI_ENVIRONMENT_SLUG\` (tier $CI_ENVIRONMENT_TIER) to <$CI_ENVIRONMENT_URL>"
        eval $(ssh-agent -s)
        echo "$GL_CI_SSH_KEY" | tr -d '\r' | ssh-add -
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan "$STAG_IP" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        sed -i "s/env-slug/$CI_ENVIRONMENT_SLUG/" hcloud.yml
        ansible -u gitlab-ci -i hcloud.yml env -m ansible.builtin.ping
        ansible-playbook -u gitlab-ci -i hcloud.yml playbook.yml
      fi
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform
  environment:
    name: Staging
  needs:
    - deploy-stag
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
  resource_group: staging

deploy-test:
  stage: deploy
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - /usr/bin/env
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  script:
    - echo "Deploy **$CI_ENVIRONMENT_NAME** environment \`$CI_ENVIRONMENT_SLUG\` (tier $CI_ENVIRONMENT_TIER) to <$CI_ENVIRONMENT_URL>"
    - terraform init -reconfigure -backend-config="address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG" -backend-config="lock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock" -backend-config="unlock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock"
    - terraform apply -auto-approve -var="ENV_SLUG=$CI_ENVIRONMENT_SLUG" -var="ENV_TIER=$CI_ENVIRONMENT_TIER"
    - TEST_IP=$(terraform output -raw hcloud_server_test_ipv4_address)
    - echo "TEST_IP=$TEST_IP" >> test.env
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform
  artifacts:
    reports:
      dotenv: test.env
  environment:
    name: Testing/$CI_COMMIT_REF_SLUG
    url: https://$CI_ENVIRONMENT_SLUG.example.com
    on_stop: destroy-test
    auto_stop_in: 1 week
  rules:
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  resource_group: testing/$CI_COMMIT_REF_SLUG

config-test:
  stage: config
  image: gableroux/ansible:latest
  script:
    - echo "TEST_IP=$TEST_IP"
    - echo "Configure **$CI_ENVIRONMENT_NAME** environment \`$CI_ENVIRONMENT_SLUG\` (tier $CI_ENVIRONMENT_TIER) to <$CI_ENVIRONMENT_URL>"
    - eval $(ssh-agent -s)
    - echo "$GL_CI_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan "$TEST_IP" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - sed -i "s/env-slug/$CI_ENVIRONMENT_SLUG/" hcloud.yml
    - ansible -u gitlab-ci -i hcloud.yml env -m ansible.builtin.ping
    - ansible-playbook -u gitlab-ci -i hcloud.yml playbook.yml
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform
  environment:
    name: Testing/$CI_COMMIT_REF_SLUG
  needs:
    - deploy-test
  rules:
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
  resource_group: testing/$CI_COMMIT_REF_SLUG

destroy-test:
  stage: destroy
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - /usr/bin/env
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  variables:
    GIT_STRATEGY: none
  before_script:
    - *default_before_script
    - apk add git
  script:
    - echo "Destroy **$CI_ENVIRONMENT_NAME** environment \`$CI_ENVIRONMENT_SLUG\` (tier $CI_ENVIRONMENT_TIER) to <$CI_ENVIRONMENT_URL>"
    - |
      if [ ! -d .git ]; then
        git init -b main
        git remote add origin $CI_REPOSITORY_URL
        git fetch origin $CI_COMMIT_SHA --depth=1
        git reset --hard FETCH_HEAD
      fi
    - terraform init -reconfigure -backend-config="address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG" -backend-config="lock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock" -backend-config="unlock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock"
    - terraform destroy -auto-approve -var="ENV_SLUG=$CI_ENVIRONMENT_SLUG" -var="ENV_TIER=$CI_ENVIRONMENT_TIER"
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform
  environment:
    name: Testing/$CI_COMMIT_REF_SLUG
    action: stop
  needs:
    - deploy-test
  rules:
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
      when: manual
      allow_failure: true

deploy-dev:
  stage: deploy
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - /usr/bin/env
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  before_script:
    - apk update
    - apk add bash curl
  script:
    - touch dev.env
    - if scripts/dev-env; then echo "DEV_ENV=true" >>dev.env; fi
    - . dev.env
    - |
      if [ "${DEV_ENV:-skip}" != 'skip' ]; then
        echo "Deploy **$CI_ENVIRONMENT_NAME** environment \`$CI_ENVIRONMENT_SLUG\` (tier $CI_ENVIRONMENT_TIER) to <$CI_ENVIRONMENT_URL>"
        terraform init -reconfigure -backend-config="address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG" -backend-config="lock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock" -backend-config="unlock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock"
        terraform apply -auto-approve -var="ENV_SLUG=$CI_ENVIRONMENT_SLUG" -var="ENV_TIER=$CI_ENVIRONMENT_TIER"
        DEV_IP=$(terraform output -raw hcloud_server_test_ipv4_address)
        echo "DEV_IP=$DEV_IP" >> dev.env
      fi
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform
  artifacts:
    reports:
      dotenv: dev.env
  environment:
    name: Development/$CI_COMMIT_REF_SLUG
    url: https://$CI_ENVIRONMENT_SLUG.example.com
    on_stop: destroy-dev
    auto_stop_in: 1 day
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != "main"
  resource_group: development/$CI_COMMIT_REF_SLUG

config-dev:
  stage: config
  image: gableroux/ansible:latest
  script:
    - echo "DEV_ENV=$DEV_ENV"
    - echo "DEV_IP=$DEV_IP"
    - |
      if [ "${DEV_ENV:-skip}" != 'skip' ]; then
        echo "Configure **$CI_ENVIRONMENT_NAME** environment \`$CI_ENVIRONMENT_SLUG\` (tier $CI_ENVIRONMENT_TIER) to <$CI_ENVIRONMENT_URL>"
        eval $(ssh-agent -s)
        echo "$GL_CI_SSH_KEY" | tr -d '\r' | ssh-add -
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan "$DEV_IP" >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        sed -i "s/env-slug/$CI_ENVIRONMENT_SLUG/" hcloud.yml
        ansible -u gitlab-ci -i hcloud.yml env -m ansible.builtin.ping
        ansible-playbook -u gitlab-ci -i hcloud.yml playbook.yml
      fi
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform
  environment:
    name: Development/$CI_COMMIT_REF_SLUG
  needs:
    - deploy-dev
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != "main"
  resource_group: development/$CI_COMMIT_REF_SLUG

destroy-dev:
  stage: destroy
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - /usr/bin/env
      - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  variables:
    GIT_STRATEGY: none
  before_script:
    - *default_before_script
    - apk add git
  script:
    - echo "DEV_ENV=$DEV_ENV"
    - |
      if [ "${DEV_ENV:-skip}" != 'skip' ]; then
        echo "Destroy **$CI_ENVIRONMENT_NAME** environment \`$CI_ENVIRONMENT_SLUG\` (tier $CI_ENVIRONMENT_TIER) to <$CI_ENVIRONMENT_URL>"
        if [ ! -d .git ]; then
          git init -b main
          git remote add origin $CI_REPOSITORY_URL
          git fetch origin $CI_COMMIT_SHA --depth=1
          git reset --hard FETCH_HEAD
        fi
        terraform init -reconfigure -backend-config="address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG" -backend-config="lock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock" -backend-config="unlock_address=$GL_TF_BE/$CI_ENVIRONMENT_SLUG/lock"
        terraform destroy -auto-approve -var="ENV_SLUG=$CI_ENVIRONMENT_SLUG" -var="ENV_TIER=$CI_ENVIRONMENT_TIER"
      fi
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .terraform
  environment:
    name: Development/$CI_COMMIT_REF_SLUG
    action: stop
  needs:
    - deploy-dev
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != "main"
      when: manual
      allow_failure: true

release:
  stage: release
  image:
    name: node:alpine
    entrypoint: [""]
  before_script:
    - *default_before_script
    - apk add git
    - npm install -g semantic-release @semantic-release/gitlab @semantic-release/git @semantic-release/changelog
  script:
    - npx semantic-release
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^(((0|[1-9]\d*)\.)(((0|[1-9]\d*|x)\.)?x)|main|next(-major)?|beta|alpha)$/ && $CI_PIPELINE_SOURCE != "schedule"
  resource_group: release
